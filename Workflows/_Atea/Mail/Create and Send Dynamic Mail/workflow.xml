<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:workflow xmlns:ns2="http://vmware.com/vco/workflow" root-name="item1" object-name="workflow:name=generic" id="ad41f9f4-1e09-4688-9674-c0a24520411b" editor-version="2.0" version="0.0.0" api-version="6.0.0" restartMode="1" resumeFromFailedMode="0">
    <display-name>Create and Send Dynamic Mail</display-name>
    <position y="50.0" x="100.0"/>
    <input/>
    <output/>
    <attrib name="smtpHost" type="string">
        <value encoded="n"/>
    </attrib>
    <attrib name="smtpPort" type="string">
        <value encoded="n"/>
    </attrib>
    <workflow-item name="item0" type="end" end-mode="0" comparator="0">
        <in-binding/>
        <out-binding/>
        <position y="50.0" x="300.0"/>
    </workflow-item>
    <workflow-item name="item1" out-name="item0" type="task" comparator="0">
        <display-name>Scriptable task</display-name>
        <script encoded="false">function encodeHTML(str){&#13;
&#13;
 if (typeof str === "undefined") {&#13;
    System.debug("'" + str + "' is undefined");&#13;
 } else {&#13;
   var aStr = str.split(''),&#13;
     i = aStr.length,&#13;
     aRet = [];&#13;
 &#13;
   while (i--) {&#13;
    var iC = aStr[i].charCodeAt();&#13;
    if (iC &lt; 65 || iC &gt; 127 || (iC&gt;90 &amp;&amp; iC&lt;97)) {&#13;
      aRet.push('&amp;#'+iC+';');&#13;
    } else {&#13;
      aRet.push(aStr[i]);&#13;
    }&#13;
  }&#13;
 return aRet.reverse().join('');&#13;
&#13;
 }&#13;
&#13;
}&#13;
&#13;
function get_me_logo(filename) {&#13;
	var category = Server.getAllResourceElementCategories();&#13;
	&#13;
	for (levelone = 0; levelone &lt; category.length; levelone++) {&#13;
		&#13;
		if (category[levelone].name === "DSV") {&#13;
			System.debug(category[levelone].name);&#13;
			&#13;
			var subCategories = category[levelone].subCategories;&#13;
			&#13;
			for (leveltwo = 0; leveltwo &lt; subCategories.length; leveltwo++) {&#13;
				var folder = subCategories[leveltwo];&#13;
				var elements = folder.resourceElements;&#13;
				&#13;
				System.debug(elements.length);&#13;
	&#13;
				for (levelthree = 0; levelthree &lt; elements.length; levelthree++) {&#13;
					var element = elements[levelthree];&#13;
	&#13;
					if (element.name === filename) {&#13;
						System.debug(element.name);&#13;
						return element;&#13;
					}&#13;
				}&#13;
			}&#13;
		}&#13;
	}&#13;
}&#13;
&#13;
function get_me_type(incoming) {&#13;
	if 		(incoming instanceof Array) 	{	return "Array";		}&#13;
	else if (incoming instanceof Object) 	{	return "Object";	}&#13;
	else if (incoming instanceof Number) 	{	return "Number";	}&#13;
	else if (incoming instanceof String) 	{	return "String";	}&#13;
	else if (incoming instanceof Boolean)	{	return "Boolean";	}&#13;
	else if (typeof incoming === "undefined") {	return "Undefined";	}&#13;
	else									{	return "No Idea";	}&#13;
}&#13;
&#13;
function convert_array_to_htmltable(arrContent) {&#13;
&#13;
	var html = "";&#13;
&#13;
/*&#13;
	System.log("==============================================");&#13;
	System.log("==============================================");&#13;
	System.log("==============================================");&#13;
	System.log("==============================================");&#13;
	System.log("==============================================");&#13;
	System.log(JSON.stringify(arrContent));&#13;
	System.log("==============================================");&#13;
	System.log("==============================================");&#13;
	System.log("==============================================");&#13;
	System.log("==============================================");&#13;
	System.log("==============================================");&#13;
*/&#13;
&#13;
	// loop the incoming array&#13;
	for (var key = 0; key &lt; arrContent.length; key++) {&#13;
		System.debug("-----------------------------------------------------------");&#13;
		System.debug("-----------------------------------------------------------");&#13;
&#13;
		for each (var realkey in arrContent[key].keys) {&#13;
			html += "&lt;h2&gt;"+encodeHTML(realkey)+"&lt;/h2&gt;\n";&#13;
			var realvalue = arrContent[key].get(realkey);&#13;
			System.debug("::::::::::::::::::::::::::::::::::::::::::::::::::");&#13;
			System.debug("RealKey: '"+realkey+"' RealValue: '"+realvalue+"' realkey-typeof: '"+typeof(realkey)+"' realval-typeof: '"+typeof(realvalue)+"' realval-type: '"+get_me_type(realvalue)+"'");&#13;
			System.debug("::::::::::::::::::::::::::::::::::::::::::::::::::");&#13;
			var value = realvalue;;&#13;
		}&#13;
&#13;
		System.debug("Key: '"+key+"' Value: '"+value+"' key-typeof: '"+typeof(key)+"' val-typeof: '"+typeof(value)+"' val-type: '"+get_me_type(value)+"'");&#13;
&#13;
		if (typeof(value) === "string") {&#13;
			//&#13;
			// String&#13;
			//&#13;
			&#13;
			System.warn("#############################")&#13;
			System.warn("#############################")&#13;
			System.warn("#############################")&#13;
			System.log(value);&#13;
			System.warn("#############################")&#13;
			System.warn("#############################")&#13;
			System.warn("#############################")&#13;
			&#13;
			value = encodeHTML(value);&#13;
&#13;
			System.warn("#############################")&#13;
			System.warn("#############################")&#13;
			System.warn("#############################")&#13;
			System.log(value);&#13;
			System.warn("#############################")&#13;
			System.warn("#############################")&#13;
			System.warn("#############################")&#13;
			&#13;
			html += "&lt;div&gt;"+value+"&lt;/div&gt;\n";&#13;
			System.debug("value is a string");&#13;
		} else if (typeof(value) === "Undefined") {&#13;
		&#13;
			value = encodeHTML(value);&#13;
			html += "&lt;div&gt;"+value+"&lt;/div&gt;\n";&#13;
			System.debug("value is UNDEFINED");&#13;
			&#13;
		&#13;
		} else if (typeof(value) === "object") {&#13;
&#13;
			if (get_me_type(value) === "Array") {&#13;
				//&#13;
				// Array&#13;
				//&#13;
				System.debug("value is a array");&#13;
		&#13;
				html += "&lt;table&gt;\n";&#13;
				for (var subkey = 0; subkey &lt; value.length; subkey++) {&#13;
					var subvalue = value[subkey];&#13;
					if (subvalue == null) {&#13;
					  subvalue = "is_null";&#13;
					}&#13;
					System.debug("SubKey: '"+subkey+"' SubValue: '"+subvalue+"' subkey-typeof: '"+typeof(subkey)+"' subval-typeof: '"+typeof(subvalue)+"' subval-type: '"+get_me_type(subvalue)+"'");&#13;
					html += "&lt;tr&gt;&lt;td&gt;"+encodeHTML(subvalue)+"&lt;/td&gt;&lt;/tr&gt;\n";&#13;
				}	&#13;
				html += "&lt;/table&gt;\n";&#13;
				&#13;
			} else if (get_me_type(value) === "Object") {&#13;
				//&#13;
				// Properties&#13;
				//&#13;
				System.debug("value is a property");&#13;
&#13;
				System.debug(value);&#13;
&#13;
				html += "&lt;table&gt;\n";&#13;
				for each (var subkey in value.keys) {&#13;
					var subvalue = value.get(subkey);&#13;
					if (subvalue == null) {&#13;
					  subvalue = "is_null";&#13;
					}&#13;
					System.debug("SubKey: '"+subkey+"' SubValue: '"+subvalue+"' subkey-typeof: '"+typeof(subkey)+"' subval-typeof: '"+typeof(subvalue)+"' subval-type: '"+get_me_type(subvalue)+"'");&#13;
					html += "&lt;tr&gt;\n&lt;td width='350'&gt;"+encodeHTML(subkey)+"&lt;/td&gt;\n&lt;td width='350'&gt;"+encodeHTML(subvalue)+"&lt;/td&gt;\n&lt;/tr&gt;\n";&#13;
				}	&#13;
				html += "&lt;/table&gt;\n";&#13;
		&#13;
			}&#13;
		} else {&#13;
			throw "key needs to be string or object of properties or array";&#13;
		}&#13;
	//    console.log(arrContent[i]);&#13;
		System.debug("-----------------------------------------------------------");&#13;
	}		&#13;
&#13;
	return html;&#13;
&#13;
}&#13;
&#13;
function DSVMailRobot() {&#13;
//    this.DSVMailRobot = function() {&#13;
//      log("DEBUG", msg);&#13;
//    };&#13;
    this.WantToSendMail = function(toaddr, toname, subj, arrContent, bccaddr) {&#13;
//      log("DEBUG", msg);&#13;
		SendTheMail(toaddr, toname, subj, arrContent, bccaddr)&#13;
    };&#13;
	this.WantToconvert_array_to_htmltable = function(arrContent) {&#13;
		convert_array_to_htmltable(arrContent)&#13;
	};&#13;
}&#13;
&#13;
function SendTheMail(toaddr, toname, subj, arrContent, bccaddr) {&#13;
&#13;
	System.debug("bccaddr: '"+bccaddr+"' bccaddr-typeof: '"+typeof(bccaddr)+"'  bccaddr-type: '"+get_me_type(bccaddr)+"'");			&#13;
//	toaddr = encodeHTML(toaddr);&#13;
//	toname = encodeHTML(toname);&#13;
//	subj = encodeHTML(subj);&#13;
&#13;
	System.debug("toaddr: '"+toaddr+"'");&#13;
	System.debug("toname: '"+toname+"'");&#13;
	System.debug("subj: '"+subj+"'");&#13;
	&#13;
	if (bccaddr === undefined) {&#13;
	    bccaddr = false;&#13;
	} 	&#13;
		&#13;
	System.debug("bccaddr: '"+bccaddr+"' bccaddr-typeof: '"+typeof(bccaddr)+"'  bccaddr-type: '"+get_me_type(bccaddr)+"'");			&#13;
&#13;
	&#13;
	// Build HTML start&#13;
	// Build header&#13;
	var html = "";&#13;
	html += "&lt;html&gt;\n";&#13;
	html += "&lt;head&gt;\n";&#13;
	html += "&lt;title&gt;"+subj+"&lt;/title&gt;\n";&#13;
	html += "&lt;style&gt;\n";&#13;
	html += "table { margin: 5px; width:700px; border: 1px solid gray; }\n";&#13;
	html += "td { margin: 2px; border: 1px solid silver; }\n";&#13;
//	html += "div { width:700px; border: 1px solid gray; }\n";&#13;
	html += "&lt;/style&gt;\n";&#13;
	html += "&lt;/head&gt;\n";&#13;
&#13;
	html += "&lt;body&gt;\n";&#13;
	html += "&lt;h1&gt;Dear "+toname+"&lt;/h1&gt;\n";&#13;
&#13;
	// Build html table with information&#13;
	html += convert_array_to_htmltable(arrContent);&#13;
&#13;
	// get DSV logo&#13;
	var dsvlogo = get_me_logo("DSVlogo_no_spaces.png");&#13;
	&#13;
	// Build footer&#13;
	html += "&lt;br/&gt;&lt;br/&gt;\n";&#13;
	html += "-- &lt;br/&gt;\n";&#13;
	html += "Kind regards,&lt;br/&gt;\n";&#13;
	var logo = dsvlogo.getContentAsMimeAttachment();&#13;
	html += "&lt;img src=\"cid:" + logo.name +  "\" alt=\"DSV Logo\"/&gt;";&#13;
	html += "&lt;div&gt;Deploy Process&lt;/div&gt;\n";	&#13;
	&#13;
	html += "&lt;/body&gt;\n";				&#13;
	// Build HTML end&#13;
						&#13;
								&#13;
										&#13;
												&#13;
														&#13;
																		&#13;
	//System.log(html);&#13;
	&#13;
	// Send this bastard&#13;
	// https://communities.vmware.com/thread/391625&#13;
	&#13;
    var MailSubjectEnvIdentifyer = System.getModule("com.dsv.vro.configurations.items").getConfigElement("DSV/Environment","SMTP","MailSubjectEnvIdentifyer");&#13;
	var message = new EmailMessage();&#13;
    message.smtpHost = smtpHost;&#13;
	    message.smtpPort = smtpPort;&#13;
	message.username = null;&#13;
    message.password = null;&#13;
    message.useSsl = false;&#13;
    message.useStartTls = false;&#13;
&#13;
	message.fromAddress = System.getModule("com.dsv.vro.configurations.items").getConfigElement("DSV/Environment","SMTP","smtpFromAddress");&#13;
	message.fromName = "DSV Deploy Process";&#13;
	message.toAddress = toaddr;&#13;
	message.subject = MailSubjectEnvIdentifyer+subj;&#13;
	&#13;
	if (bccaddr !== false) {&#13;
		message.bccAddress = bccaddr;&#13;
	}&#13;
	&#13;
	message.addMimePart(html, "text/html");&#13;
	message.addMimePart(logo, null);&#13;
	try{&#13;
		message.sendMessage();&#13;
	} catch (error){&#13;
		System.warn("Could Not send email"+error);&#13;
	}&#13;
}&#13;
&#13;
return DSVMailRobot;&#13;
</script>
        <in-binding/>
        <out-binding>
            <bind name="smtpHost" type="string" export-name="smtpHost"/>
            <bind name="smtpPort" type="string" export-name="smtpPort"/>
        </out-binding>
        <description>Simple task with custom script capability.</description>
        <position y="60.0" x="150.0"/>
    </workflow-item>
</ns2:workflow>
